/* This file was auto-generated by graphql-codgen, and should not be modified. */
/* eslint-disable */
import gql from 'graphql-tag';
import * as React from 'react';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactHoc from '@apollo/react-hoc';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
};

export type Query = {
   __typename?: 'Query',
  dummyField?: Maybe<Scalars['Boolean']>,
  wonkyResolver: Array<Scalars['ID']>,
};


export type QueryWonkyResolverArgs = {
  uselessId: Scalars['ID']
};
export type WonkyQueryVariables = {
  id: Scalars['ID']
};


export type WonkyQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'wonkyResolver'>
);

export const WonkyDocument = gql`
    query Wonky($id: ID!) {
  wonkyResolver(uselessId: $id) @client(always: true)
}
    `;
export type WonkyComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<WonkyQuery, WonkyQueryVariables>, 'query'> & ({ variables: WonkyQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const WonkyComponent = (props: WonkyComponentProps) => (
      <ApolloReactComponents.Query<WonkyQuery, WonkyQueryVariables> query={WonkyDocument} {...props} />
    );
    
export type WonkyProps<TChildProps = {}> = ApolloReactHoc.DataProps<WonkyQuery, WonkyQueryVariables> & TChildProps;
export function withWonky<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  WonkyQuery,
  WonkyQueryVariables,
  WonkyProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, WonkyQuery, WonkyQueryVariables, WonkyProps<TChildProps>>(WonkyDocument, {
      alias: 'wonky',
      ...operationOptions
    });
};

    export function useWonkyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<WonkyQuery, WonkyQueryVariables>) {
      return ApolloReactHooks.useQuery<WonkyQuery, WonkyQueryVariables>(WonkyDocument, baseOptions);
    }
      export function useWonkyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<WonkyQuery, WonkyQueryVariables>) {
        return ApolloReactHooks.useLazyQuery<WonkyQuery, WonkyQueryVariables>(WonkyDocument, baseOptions);
      }
      
export type WonkyQueryHookResult = ReturnType<typeof useWonkyQuery>;
export type WonkyQueryResult = ApolloReactCommon.QueryResult<WonkyQuery, WonkyQueryVariables>;